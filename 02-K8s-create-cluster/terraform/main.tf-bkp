

provider "aws" {
  region = var.AWS_REGION
}


data "aws_vpc" "default" {
  default = true
}


resource "aws_default_subnet" "subnet" {
  for_each = toset(local.azs)
  availability_zone = "${each.value}"
}





data "aws_availability_zones" "available" {}
data "aws_caller_identity" "current" {}
  

locals {
  name = "${var.name}-${var.env}"
    azs      = slice(data.aws_availability_zones.available.names, 0, 3)
}

# module "eks" {
#   source  = "terraform-aws-modules/eks/aws"
#   version = "~> 19.0"

#   cluster_name    = local.name
#   cluster_version = "1.22"

#   cluster_endpoint_public_access  = true

#   vpc_id                   = module.vpc.vpc_id
#   subnet_ids               = module.vpc.public_subnets
#   control_plane_subnet_ids = module.vpc.intra_subnets


#   eks_managed_node_groups = {
#     blue = {}
#     green = {
#       min_size     = 1
#       max_size     = 1
#       desired_size = 1

#       instance_types = ["t2.medium"]
#     }
#   }
# }




# ################################################################################
# # Supporting resources
# ################################################################################

# module "vpc" {
#   source  = "terraform-aws-modules/vpc/aws"
#   version = "~> 3.0"

#   name = local.name
#   cidr = local.vpc_cidr

#   azs             = local.azs
#   private_subnets = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 4, k)]
#   public_subnets  = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k + 48)]
#   intra_subnets   = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k + 52)]

#   enable_nat_gateway   = true
#   single_nat_gateway   = true
#   enable_dns_hostnames = true

#   enable_flow_log                      = true
#   create_flow_log_cloudwatch_iam_role  = true
#   create_flow_log_cloudwatch_log_group = true

#   public_subnet_tags = {
#     "kubernetes.io/role/elb" = 1
#   }

#   private_subnet_tags = {
#     "kubernetes.io/role/internal-elb" = 1
#   }

#   tags = local.tags
# }

# resource "aws_security_group" "additional" {
#   name_prefix = "${local.name}-additional"
#   vpc_id      = module.vpc.vpc_id

#   ingress {
#     from_port = 22
#     to_port   = 22
#     protocol  = "tcp"
#     cidr_blocks = [
#       "10.0.0.0/8",
#       "172.16.0.0/12",
#       "192.168.0.0/16",
#     ]
#   }

#   tags = merge(local.tags, { Name = "${local.name}-additional" })
# }